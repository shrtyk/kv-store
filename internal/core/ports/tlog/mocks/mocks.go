// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package tlogmocks

import (
	"context"
	"sync"

	"github.com/shrtyk/kv-store/internal/core/ports/store"
	"github.com/shrtyk/kv-store/proto/log_entries/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTransactionsLogger creates a new instance of MockTransactionsLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionsLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionsLogger {
	mock := &MockTransactionsLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactionsLogger is an autogenerated mock type for the TransactionsLogger type
type MockTransactionsLogger struct {
	mock.Mock
}

type MockTransactionsLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionsLogger) EXPECT() *MockTransactionsLogger_Expecter {
	return &MockTransactionsLogger_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockTransactionsLogger
func (_mock *MockTransactionsLogger) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionsLogger_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockTransactionsLogger_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockTransactionsLogger_Expecter) Close() *MockTransactionsLogger_Close_Call {
	return &MockTransactionsLogger_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockTransactionsLogger_Close_Call) Run(run func()) *MockTransactionsLogger_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionsLogger_Close_Call) Return(err error) *MockTransactionsLogger_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionsLogger_Close_Call) RunAndReturn(run func() error) *MockTransactionsLogger_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function for the type MockTransactionsLogger
func (_mock *MockTransactionsLogger) Err() <-chan error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 <-chan error
	if returnFunc, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}
	return r0
}

// MockTransactionsLogger_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockTransactionsLogger_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockTransactionsLogger_Expecter) Err() *MockTransactionsLogger_Err_Call {
	return &MockTransactionsLogger_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockTransactionsLogger_Err_Call) Run(run func()) *MockTransactionsLogger_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionsLogger_Err_Call) Return(errCh <-chan error) *MockTransactionsLogger_Err_Call {
	_c.Call.Return(errCh)
	return _c
}

func (_c *MockTransactionsLogger_Err_Call) RunAndReturn(run func() <-chan error) *MockTransactionsLogger_Err_Call {
	_c.Call.Return(run)
	return _c
}

// ReadEvents provides a mock function for the type MockTransactionsLogger
func (_mock *MockTransactionsLogger) ReadEvents() (<-chan *entries_v1.LogEntry, <-chan error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadEvents")
	}

	var r0 <-chan *entries_v1.LogEntry
	var r1 <-chan error
	if returnFunc, ok := ret.Get(0).(func() (<-chan *entries_v1.LogEntry, <-chan error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() <-chan *entries_v1.LogEntry); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *entries_v1.LogEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() <-chan error); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}
	return r0, r1
}

// MockTransactionsLogger_ReadEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadEvents'
type MockTransactionsLogger_ReadEvents_Call struct {
	*mock.Call
}

// ReadEvents is a helper method to define mock.On call
func (_e *MockTransactionsLogger_Expecter) ReadEvents() *MockTransactionsLogger_ReadEvents_Call {
	return &MockTransactionsLogger_ReadEvents_Call{Call: _e.mock.On("ReadEvents")}
}

func (_c *MockTransactionsLogger_ReadEvents_Call) Run(run func()) *MockTransactionsLogger_ReadEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionsLogger_ReadEvents_Call) Return(logEntryCh <-chan *entries_v1.LogEntry, errCh <-chan error) *MockTransactionsLogger_ReadEvents_Call {
	_c.Call.Return(logEntryCh, errCh)
	return _c
}

func (_c *MockTransactionsLogger_ReadEvents_Call) RunAndReturn(run func() (<-chan *entries_v1.LogEntry, <-chan error)) *MockTransactionsLogger_ReadEvents_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockTransactionsLogger
func (_mock *MockTransactionsLogger) Start(ctx context.Context, wg *sync.WaitGroup, s store.Store) {
	_mock.Called(ctx, wg, s)
	return
}

// MockTransactionsLogger_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockTransactionsLogger_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - wg *sync.WaitGroup
//   - s store.Store
func (_e *MockTransactionsLogger_Expecter) Start(ctx interface{}, wg interface{}, s interface{}) *MockTransactionsLogger_Start_Call {
	return &MockTransactionsLogger_Start_Call{Call: _e.mock.On("Start", ctx, wg, s)}
}

func (_c *MockTransactionsLogger_Start_Call) Run(run func(ctx context.Context, wg *sync.WaitGroup, s store.Store)) *MockTransactionsLogger_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sync.WaitGroup
		if args[1] != nil {
			arg1 = args[1].(*sync.WaitGroup)
		}
		var arg2 store.Store
		if args[2] != nil {
			arg2 = args[2].(store.Store)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTransactionsLogger_Start_Call) Return() *MockTransactionsLogger_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionsLogger_Start_Call) RunAndReturn(run func(ctx context.Context, wg *sync.WaitGroup, s store.Store)) *MockTransactionsLogger_Start_Call {
	_c.Run(run)
	return _c
}

// WaitWritings provides a mock function for the type MockTransactionsLogger
func (_mock *MockTransactionsLogger) WaitWritings() {
	_mock.Called()
	return
}

// MockTransactionsLogger_WaitWritings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitWritings'
type MockTransactionsLogger_WaitWritings_Call struct {
	*mock.Call
}

// WaitWritings is a helper method to define mock.On call
func (_e *MockTransactionsLogger_Expecter) WaitWritings() *MockTransactionsLogger_WaitWritings_Call {
	return &MockTransactionsLogger_WaitWritings_Call{Call: _e.mock.On("WaitWritings")}
}

func (_c *MockTransactionsLogger_WaitWritings_Call) Run(run func()) *MockTransactionsLogger_WaitWritings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionsLogger_WaitWritings_Call) Return() *MockTransactionsLogger_WaitWritings_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionsLogger_WaitWritings_Call) RunAndReturn(run func()) *MockTransactionsLogger_WaitWritings_Call {
	_c.Run(run)
	return _c
}

// WriteDelete provides a mock function for the type MockTransactionsLogger
func (_mock *MockTransactionsLogger) WriteDelete(key string) {
	_mock.Called(key)
	return
}

// MockTransactionsLogger_WriteDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteDelete'
type MockTransactionsLogger_WriteDelete_Call struct {
	*mock.Call
}

// WriteDelete is a helper method to define mock.On call
//   - key string
func (_e *MockTransactionsLogger_Expecter) WriteDelete(key interface{}) *MockTransactionsLogger_WriteDelete_Call {
	return &MockTransactionsLogger_WriteDelete_Call{Call: _e.mock.On("WriteDelete", key)}
}

func (_c *MockTransactionsLogger_WriteDelete_Call) Run(run func(key string)) *MockTransactionsLogger_WriteDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionsLogger_WriteDelete_Call) Return() *MockTransactionsLogger_WriteDelete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionsLogger_WriteDelete_Call) RunAndReturn(run func(key string)) *MockTransactionsLogger_WriteDelete_Call {
	_c.Run(run)
	return _c
}

// WritePut provides a mock function for the type MockTransactionsLogger
func (_mock *MockTransactionsLogger) WritePut(key string, val string) {
	_mock.Called(key, val)
	return
}

// MockTransactionsLogger_WritePut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WritePut'
type MockTransactionsLogger_WritePut_Call struct {
	*mock.Call
}

// WritePut is a helper method to define mock.On call
//   - key string
//   - val string
func (_e *MockTransactionsLogger_Expecter) WritePut(key interface{}, val interface{}) *MockTransactionsLogger_WritePut_Call {
	return &MockTransactionsLogger_WritePut_Call{Call: _e.mock.On("WritePut", key, val)}
}

func (_c *MockTransactionsLogger_WritePut_Call) Run(run func(key string, val string)) *MockTransactionsLogger_WritePut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionsLogger_WritePut_Call) Return() *MockTransactionsLogger_WritePut_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionsLogger_WritePut_Call) RunAndReturn(run func(key string, val string)) *MockTransactionsLogger_WritePut_Call {
	_c.Run(run)
	return _c
}
