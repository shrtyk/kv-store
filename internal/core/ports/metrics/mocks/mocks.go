// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metricsmocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockMetrics creates a new instance of MockMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetrics {
	mock := &MockMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetrics is an autogenerated mock type for the Metrics type
type MockMetrics struct {
	mock.Mock
}

type MockMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetrics) EXPECT() *MockMetrics_Expecter {
	return &MockMetrics_Expecter{mock: &_m.Mock}
}

// GrpcDelete provides a mock function for the type MockMetrics
func (_mock *MockMetrics) GrpcDelete(key string, duration float64) {
	_mock.Called(key, duration)
	return
}

// MockMetrics_GrpcDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrpcDelete'
type MockMetrics_GrpcDelete_Call struct {
	*mock.Call
}

// GrpcDelete is a helper method to define mock.On call
//   - key string
//   - duration float64
func (_e *MockMetrics_Expecter) GrpcDelete(key interface{}, duration interface{}) *MockMetrics_GrpcDelete_Call {
	return &MockMetrics_GrpcDelete_Call{Call: _e.mock.On("GrpcDelete", key, duration)}
}

func (_c *MockMetrics_GrpcDelete_Call) Run(run func(key string, duration float64)) *MockMetrics_GrpcDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetrics_GrpcDelete_Call) Return() *MockMetrics_GrpcDelete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_GrpcDelete_Call) RunAndReturn(run func(key string, duration float64)) *MockMetrics_GrpcDelete_Call {
	_c.Run(run)
	return _c
}

// GrpcGet provides a mock function for the type MockMetrics
func (_mock *MockMetrics) GrpcGet(key string, duration float64) {
	_mock.Called(key, duration)
	return
}

// MockMetrics_GrpcGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrpcGet'
type MockMetrics_GrpcGet_Call struct {
	*mock.Call
}

// GrpcGet is a helper method to define mock.On call
//   - key string
//   - duration float64
func (_e *MockMetrics_Expecter) GrpcGet(key interface{}, duration interface{}) *MockMetrics_GrpcGet_Call {
	return &MockMetrics_GrpcGet_Call{Call: _e.mock.On("GrpcGet", key, duration)}
}

func (_c *MockMetrics_GrpcGet_Call) Run(run func(key string, duration float64)) *MockMetrics_GrpcGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetrics_GrpcGet_Call) Return() *MockMetrics_GrpcGet_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_GrpcGet_Call) RunAndReturn(run func(key string, duration float64)) *MockMetrics_GrpcGet_Call {
	_c.Run(run)
	return _c
}

// GrpcPut provides a mock function for the type MockMetrics
func (_mock *MockMetrics) GrpcPut(key string, duration float64) {
	_mock.Called(key, duration)
	return
}

// MockMetrics_GrpcPut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrpcPut'
type MockMetrics_GrpcPut_Call struct {
	*mock.Call
}

// GrpcPut is a helper method to define mock.On call
//   - key string
//   - duration float64
func (_e *MockMetrics_Expecter) GrpcPut(key interface{}, duration interface{}) *MockMetrics_GrpcPut_Call {
	return &MockMetrics_GrpcPut_Call{Call: _e.mock.On("GrpcPut", key, duration)}
}

func (_c *MockMetrics_GrpcPut_Call) Run(run func(key string, duration float64)) *MockMetrics_GrpcPut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetrics_GrpcPut_Call) Return() *MockMetrics_GrpcPut_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_GrpcPut_Call) RunAndReturn(run func(key string, duration float64)) *MockMetrics_GrpcPut_Call {
	_c.Run(run)
	return _c
}

// HttpDelete provides a mock function for the type MockMetrics
func (_mock *MockMetrics) HttpDelete(key string, duration float64) {
	_mock.Called(key, duration)
	return
}

// MockMetrics_HttpDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HttpDelete'
type MockMetrics_HttpDelete_Call struct {
	*mock.Call
}

// HttpDelete is a helper method to define mock.On call
//   - key string
//   - duration float64
func (_e *MockMetrics_Expecter) HttpDelete(key interface{}, duration interface{}) *MockMetrics_HttpDelete_Call {
	return &MockMetrics_HttpDelete_Call{Call: _e.mock.On("HttpDelete", key, duration)}
}

func (_c *MockMetrics_HttpDelete_Call) Run(run func(key string, duration float64)) *MockMetrics_HttpDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetrics_HttpDelete_Call) Return() *MockMetrics_HttpDelete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_HttpDelete_Call) RunAndReturn(run func(key string, duration float64)) *MockMetrics_HttpDelete_Call {
	_c.Run(run)
	return _c
}

// HttpGet provides a mock function for the type MockMetrics
func (_mock *MockMetrics) HttpGet(key string, duration float64) {
	_mock.Called(key, duration)
	return
}

// MockMetrics_HttpGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HttpGet'
type MockMetrics_HttpGet_Call struct {
	*mock.Call
}

// HttpGet is a helper method to define mock.On call
//   - key string
//   - duration float64
func (_e *MockMetrics_Expecter) HttpGet(key interface{}, duration interface{}) *MockMetrics_HttpGet_Call {
	return &MockMetrics_HttpGet_Call{Call: _e.mock.On("HttpGet", key, duration)}
}

func (_c *MockMetrics_HttpGet_Call) Run(run func(key string, duration float64)) *MockMetrics_HttpGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetrics_HttpGet_Call) Return() *MockMetrics_HttpGet_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_HttpGet_Call) RunAndReturn(run func(key string, duration float64)) *MockMetrics_HttpGet_Call {
	_c.Run(run)
	return _c
}

// HttpPut provides a mock function for the type MockMetrics
func (_mock *MockMetrics) HttpPut(key string, duration float64) {
	_mock.Called(key, duration)
	return
}

// MockMetrics_HttpPut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HttpPut'
type MockMetrics_HttpPut_Call struct {
	*mock.Call
}

// HttpPut is a helper method to define mock.On call
//   - key string
//   - duration float64
func (_e *MockMetrics_Expecter) HttpPut(key interface{}, duration interface{}) *MockMetrics_HttpPut_Call {
	return &MockMetrics_HttpPut_Call{Call: _e.mock.On("HttpPut", key, duration)}
}

func (_c *MockMetrics_HttpPut_Call) Run(run func(key string, duration float64)) *MockMetrics_HttpPut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetrics_HttpPut_Call) Return() *MockMetrics_HttpPut_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_HttpPut_Call) RunAndReturn(run func(key string, duration float64)) *MockMetrics_HttpPut_Call {
	_c.Run(run)
	return _c
}

// HttpRequest provides a mock function for the type MockMetrics
func (_mock *MockMetrics) HttpRequest(code int, method string, path string, latency float64) {
	_mock.Called(code, method, path, latency)
	return
}

// MockMetrics_HttpRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HttpRequest'
type MockMetrics_HttpRequest_Call struct {
	*mock.Call
}

// HttpRequest is a helper method to define mock.On call
//   - code int
//   - method string
//   - path string
//   - latency float64
func (_e *MockMetrics_Expecter) HttpRequest(code interface{}, method interface{}, path interface{}, latency interface{}) *MockMetrics_HttpRequest_Call {
	return &MockMetrics_HttpRequest_Call{Call: _e.mock.On("HttpRequest", code, method, path, latency)}
}

func (_c *MockMetrics_HttpRequest_Call) Run(run func(code int, method string, path string, latency float64)) *MockMetrics_HttpRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 float64
		if args[3] != nil {
			arg3 = args[3].(float64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockMetrics_HttpRequest_Call) Return() *MockMetrics_HttpRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_HttpRequest_Call) RunAndReturn(run func(code int, method string, path string, latency float64)) *MockMetrics_HttpRequest_Call {
	_c.Run(run)
	return _c
}
