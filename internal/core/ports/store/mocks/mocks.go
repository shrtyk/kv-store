// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storemocks

import (
	"context"
	"sync"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockStore
func (_mock *MockStore) Delete(key string) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *MockStore_Expecter) Delete(key interface{}) *MockStore_Delete_Call {
	return &MockStore_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *MockStore_Delete_Call) Run(run func(key string)) *MockStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStore_Delete_Call) Return(err error) *MockStore_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_Delete_Call) RunAndReturn(run func(key string) error) *MockStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockStore
func (_mock *MockStore) Get(key string) (string, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockStore_Expecter) Get(key interface{}) *MockStore_Get_Call {
	return &MockStore_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockStore_Get_Call) Run(run func(key string)) *MockStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStore_Get_Call) Return(s string, err error) *MockStore_Get_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStore_Get_Call) RunAndReturn(run func(key string) (string, error)) *MockStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Items provides a mock function for the type MockStore
func (_mock *MockStore) Items() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Items")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockStore_Items_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Items'
type MockStore_Items_Call struct {
	*mock.Call
}

// Items is a helper method to define mock.On call
func (_e *MockStore_Expecter) Items() *MockStore_Items_Call {
	return &MockStore_Items_Call{Call: _e.mock.On("Items")}
}

func (_c *MockStore_Items_Call) Run(run func()) *MockStore_Items_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_Items_Call) Return(stringToString map[string]string) *MockStore_Items_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockStore_Items_Call) RunAndReturn(run func() map[string]string) *MockStore_Items_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockStore
func (_mock *MockStore) Put(key string, value string) error {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockStore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *MockStore_Expecter) Put(key interface{}, value interface{}) *MockStore_Put_Call {
	return &MockStore_Put_Call{Call: _e.mock.On("Put", key, value)}
}

func (_c *MockStore_Put_Call) Run(run func(key string, value string)) *MockStore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_Put_Call) Return(err error) *MockStore_Put_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_Put_Call) RunAndReturn(run func(key string, value string) error) *MockStore_Put_Call {
	_c.Call.Return(run)
	return _c
}

// StartMapRebuilder provides a mock function for the type MockStore
func (_mock *MockStore) StartMapRebuilder(ctx context.Context, wg *sync.WaitGroup) {
	_mock.Called(ctx, wg)
	return
}

// MockStore_StartMapRebuilder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartMapRebuilder'
type MockStore_StartMapRebuilder_Call struct {
	*mock.Call
}

// StartMapRebuilder is a helper method to define mock.On call
//   - ctx context.Context
//   - wg *sync.WaitGroup
func (_e *MockStore_Expecter) StartMapRebuilder(ctx interface{}, wg interface{}) *MockStore_StartMapRebuilder_Call {
	return &MockStore_StartMapRebuilder_Call{Call: _e.mock.On("StartMapRebuilder", ctx, wg)}
}

func (_c *MockStore_StartMapRebuilder_Call) Run(run func(ctx context.Context, wg *sync.WaitGroup)) *MockStore_StartMapRebuilder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sync.WaitGroup
		if args[1] != nil {
			arg1 = args[1].(*sync.WaitGroup)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_StartMapRebuilder_Call) Return() *MockStore_StartMapRebuilder_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStore_StartMapRebuilder_Call) RunAndReturn(run func(ctx context.Context, wg *sync.WaitGroup)) *MockStore_StartMapRebuilder_Call {
	_c.Run(run)
	return _c
}
